[{"id":0,"href":"/enfusion-community-documentation/","title":"","parent":"","content":"Enfusion Community Documentation     Community created and maintained documentation for Bohemia Interactive\u0026rsquo;s Enfusion engine.     New to Enfusion?     The best place to start is to familiarize yourself with the Workbench and look at the tutorials in the navigation bar to the right.\n Contributing     Steps to contribute:      Clone main, Edit/add the category/document inside content Create a pull request to main. Your request will be evaluated and accepted.  Example:      Clone main. Create a new tutorial in Scripting like so:  content |---Scripting |---_index.md // needed to make the category display. Can be blank. |---Documentation |---_index.md |---Tutorials |---1. Hello World |---_index.md +|---2. Notifications +|---_index.md |---_index.md Create a pull request to main. Profit.   TODO     ##1. Create a video on how to contribute.\n"},{"id":1,"href":"/enfusion-community-documentation/Scripting/","title":"Scripting","parent":"","content":""},{"id":2,"href":"/enfusion-community-documentation/Scripting/Documentation/","title":"Documentation","parent":"Scripting","content":""},{"id":3,"href":"/enfusion-community-documentation/Scripting/Tutorials/1.-Hello-World/1.-Setup/","title":"1. Setup","parent":"1. Hello World","content":"Goal: Print “Hello World” to the “Output box” when a scenario is started.\nTo do this we are going to override the “OnGameStart” method from the “SCR_GameCoreBase” class. The class is in the “scripts\\Game\\GameCore” directory. So we will recreate that path.\nIn the Workbench “Resource Browser”:\n Click on your project name (“EnscriptTutorial” in this case). Click “+Create” Then click “folder” Name the folder “scripts”. Click on the “scripts” folder you made. Repeat steps 2-5 changing “scripts” to the correct folder name. Finally we need to create a “Modded” folder for our script to go in. 7.1 This keeps everything nice and tidy and ensures there’s no confusion between the original and ours.  When you’re done it should look like this:\n\u0026gt;ArmaReforger \u0026gt;core \u0026gt;EnscriptTutorial \u0026gt;scripts \u0026gt;Game \u0026gt;GameCore \u0026gt;Modded \u0026gt;profile Now create a script file (“+Create” \u0026gt; “Script”) and name it “SCR_GameCoreBase”.  The reason we name it “SCR_GameCoreBase” apart from maintaining consistency with vanilla is so we can more easily figure out what changes a particular project has made to certain classes.  "},{"id":4,"href":"/enfusion-community-documentation/Scripting/Tutorials/1.-Hello-World/2.-Creation/","title":"2. Creation","parent":"1. Hello World","content":"Now to edit the script, double click on it. This will open the script editor.\nNow we need to create the class, remember since we are modifying a vanilla class we need to use the “modded” keyword. Then we need to create and override the “OnGameStart” method (remember it’s void!).\nmodded class SCR_GameCoreBase { override void OnGameStart() { } } Then we need to make it print “Hello World” and make sure we don’t break stuff (you read the documentation right?)\nmodded class SCR_GameCoreBase { override void OnGameStart() { super.OnGameStart(); Print(\u0026#34;Hello World\u0026#34;); } }   The super keyword is extremely important when overriding classes.  "},{"id":5,"href":"/enfusion-community-documentation/Scripting/Tutorials/1.-Hello-World/3.-Testing/","title":"3. Testing","parent":"1. Hello World","content":"To test it we need to save the script: (“File” \u0026gt; “Save All” || CTRL + S) and compile it (“Build” \u0026gt; “Compile and Reload Scripts” || SHIIFT + F7).  Compile note: If you compile while in the “World Editor” it will restart the “World Editor”..  Now we need to open the World Editor. To do this switch to the Workbench then press “Editors” \u0026gt; “World Editor”.\nIn the World Editor we need to load the Eden world. To do this go “File” \u0026gt; “Load World” or press CTRL + O. Then double click on “Eden.ent”.\nOnce Eden loads press the green play button on the top bar and let it load. Once it loads, switch to the “Script Editor” and look in the “Output Box”. You should see “Hello World” (say “hello” back!). It should look like this:\nCongratulations! You’ve just created your first script and made it execute when a scenario loads!     "},{"id":6,"href":"/enfusion-community-documentation/Scripting/Tutorials/1.-Hello-World/","title":"1. Hello World","parent":"Tutorials","content":"A good first script to get you started.\nAlright, before we get into how to say “Hello World” and such we need to go over some quirks:\n Paths are important; your code will not run if it isn’t in the correct path. Every time you save your code you will need to recompile it. Every. Time. Remember how in Arma 3 there was a debug console? Yeah..that’s gone.  Know how I said paths are important, well here’s the vanilla paths:\n   Project Path     Engine (\u0026lsquo;scripts/Core\u0026rsquo;)   GameLib (\u0026lsquo;scripts/GameLib\u0026rsquo;)   Game (\u0026lsquo;scripts/Game\u0026rsquo;)   Entities    WorkbenchGame (\u0026lsquo;scripts/WorkbenchGameCommon\u0026rsquo;)   Workbench (\u0026lsquo;scripts/WorkbenchCommon\u0026rsquo;)   The paths in parens “()” are what you need to recreate in your project folder.    \\    Alright, enough of the boring stuff, let’s write “Hello World”. For this example we will be writing a bit of code that will print “Hello World” when you start a scenario.     This tutorial is based off of the official “Scripting Modding” documentation. I recommend reading through it. https://community.bistudio.com/wiki/Arma_Reforger:Scripting_Modding\n"},{"id":7,"href":"/enfusion-community-documentation/Scripting/Tutorials/","title":"Tutorials","parent":"Scripting","content":"All tutorials assume you have read the following documentation:\nHow is it different from SQF\nObject Oriented Programing Intro \nCoding/style conventions\nCode performance\n"},{"id":8,"href":"/enfusion-community-documentation/Workbench/","title":"Workbench","parent":"","content":""},{"id":9,"href":"/enfusion-community-documentation/Workbench/Documentation/","title":"Documentation","parent":"Workbench","content":""},{"id":10,"href":"/enfusion-community-documentation/Workbench/Documentation/Script-Editor/","title":"Script Editor","parent":"Documentation","content":"The Script Editor     Introduction     The Script Editor is where you edit scripts.\nToolbar. Here you can access different editors, change settings, etc.\nDebug controls. This will be used for breakpoints and such (you read the wiki right?).\nProjects box. This is where all the code is. You’ll be spending a lot of time here.\nError box. Syntax errors will show here.\nOutput box. You’ll be using this a lot. Errors, prints, and such are found here.\nConsole box. Used for debugging, haven’t messed with it.\nThe editor. This is where you will write/read code…also where dreams are crushed.\nNot shown: Find Symbol box. Allows you to search for functions/methods/variables.\n"},{"id":11,"href":"/enfusion-community-documentation/Workbench/Documentation/Workbench/","title":"Workbench","parent":"Documentation","content":"The Workbench     Introduction     The workbench is the hub for all Enfusion tools. It is where your file tree is located and where you access the various tools from.\nToolbar. Here you can access different editors, change settings, etc.\nResource Browser. Here is where you view/create files. You’ll use this quite a bit.\nFile viewer. If you double click on a file in the “Resource Browser” it will be previewed here. The exception being any file that has a specific editor association will open that editor.\nLog console. Here you’ll see any Workbench errors.\nResource Variants. I don’t know what this is for at the moment.\\\n"},{"id":12,"href":"/enfusion-community-documentation/Workbench/Tutorials/","title":"Tutorials","parent":"Workbench","content":""},{"id":13,"href":"/enfusion-community-documentation/tags/","title":"Tags","parent":"","content":""}]